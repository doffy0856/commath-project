{"version":3,"sources":["views/Main.js","views/Number1.js","views/Number2.js","views/Number3.js","views/Number4.js","views/Number5.js","views/Number6.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Main","navigate","useNavigate","nextPage","page","onClick","Number1","Number2","Number3","Number4","Number5","Number6","routes","path","element","App","router","useRoutes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6MAwCeA,MAnCf,WACE,IAAMC,EAAWC,cAEXC,EAAW,SAACC,GAChBH,EAAS,IAAIG,IAEf,OACE,6BACI,4BAAQC,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,yCAEJ,6BACA,4BAAQE,QAAS,WAAKF,EAAS,aAC3B,2CChCG,SAASG,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCFO,SAASC,IACpB,OACI,4CCKR,IAkCeC,EAlCA,CAAC,CACRC,KAAM,IACNC,QAAS,kBAAE,EAAF,OAEb,CACID,KAAM,mBACNC,QAAS,kBAAE,EAAF,OAEb,CACID,KAAM,UACNC,QAAS,kBAAER,EAAF,OAEb,CACIO,KAAM,UACNC,QAAS,kBAAEP,EAAF,OAEb,CACIM,KAAM,UACNC,QAAS,kBAAEN,EAAF,OAEb,CACIK,KAAM,UACNC,QAAS,kBAAEL,EAAF,OAEb,CACII,KAAM,UACNC,QAAS,kBAAEJ,EAAF,OAEb,CACIG,KAAM,UACNC,QAAS,kBAAEH,EAAF,QC7BFI,EALH,WACR,IAAMC,EAASC,YAAUL,GACzB,OAAO,iCAASI,EAAT,M,OCKSE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OAAQ,kBACb,IADa,KAEb,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.44406a6e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../App.css\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nfunction Main() {\n  const navigate = useNavigate();\n\n  const nextPage = (page) => {\n    navigate(\"/\"+page);\n  }\n  return (\n    <div>\n        <button onClick={()=>{nextPage(\"Number1\")}}>\n            <h3>Number 1</h3>\n        </button>\n        <br/>\n        <button onClick={()=>{nextPage(\"Number2\")}} >\n            <h3>Number 2</h3>\n        </button>\n        <br/>\n        <button onClick={()=>{nextPage(\"Number3\")}} >\n            <h3>Number 3</h3>\n        </button>\n        <br/>\n        <button onClick={()=>{nextPage(\"Number4\")}} >\n            <h3>Number 4</h3>\n        </button>\n        <br/>\n        <button onClick={()=>{nextPage(\"Number5\")}} >\n            <h3>Number 5</h3>\n        </button>\n        <br/>\n        <button onClick={()=>{nextPage(\"Number6\")}} >\n            <h3>Number 6</h3>\n        </button>\n    </div>\n  );\n}\n\nexport default Main;","import React from 'react'\n\nexport default function Number1() {\n    return (\n        <h1>Hello World!</h1>\n    )\n}\n","import React from 'react'\n\nexport default function Number2() {\n    return (\n        <h1>Hello World!</h1>\n    )\n}\n","import React from 'react'\n\nexport default function Number3() {\n    return (\n        <h1>Hello World!</h1>\n    )\n}\n","import React from 'react'\n\nexport default function Number4() {\n    return (\n        <h1>Hello World!</h1>\n    )\n}\n","import React from 'react'\n\nexport default function Number5() {\n    return (\n        <h1>Hello World!</h1>\n    )\n}\n","import React from 'react'\n\nexport default function Number6() {\n    return (\n        <h1>Hello World!</h1>\n    )\n}\n","import React from \"react\";\nimport Main from \"./views/Main\";\nimport Number1 from \"./views/Number1\";\nimport Number2 from \"./views/Number2\";\nimport Number3 from \"./views/Number3\";\nimport Number4 from \"./views/Number4\";\nimport Number5 from \"./views/Number5\";\nimport Number6 from \"./views/Number6\";\n\nconst routes = [{\n        path: \"/\",\n        element: < Main / > ,\n    },\n    {\n        path: \"/commath-project\",\n        element: < Main / > ,\n    },\n    {\n        path: \"Number1\",\n        element: < Number1 / > ,\n    },\n    {\n        path: \"Number2\",\n        element: < Number2 / > ,\n    },\n    {\n        path: \"Number3\",\n        element: < Number3 / > ,\n    },\n    {\n        path: \"Number4\",\n        element: < Number4 / > ,\n    },\n    {\n        path: \"Number5\",\n        element: < Number5 / > ,\n    },\n    {\n        path: \"Number6\",\n        element: < Number6 / > ,\n    },\n];\n\nexport default routes;","import React from 'react';\nimport './App.css';\nimport routes from \"./routes\";\nimport { useRoutes } from \"react-router-dom\";\n\nconst App = () => {\n    const router = useRoutes(routes);\n    return <div > { router } </div>;\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render( <\n    BrowserRouter >\n    <App / >\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}